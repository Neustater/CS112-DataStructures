package poly;

import java.io.IOException;
import java.util.Scanner;

/**
 * This class implements evaluate, add and multiply for polynomials.
 * 
 * @author Michael Neustater
 *
 */
public class Polynomial {
	
	/**
	 * Reads a polynomial from an input stream (file or keyboard). The storage format
	 * of the polynomial is:
	 * <pre>
	 *     <coeff> <degree>
	 *     <coeff> <degree>
	 *     ...
	 *     <coeff> <degree>
	 * </pre>
	 * with the guarantee that degrees will be in descending order. For example:
	 * <pre>
	 *      4 5
	 *     -2 3
	 *      2 1
	 *      3 0
	 * </pre>
	 * which represents the polynomial:
	 * <pre>
	 *      4*x^5 - 2*x^3 + 2*x + 3 
	 * </pre>
	 * 
	 * @param sc Scanner from which a polynomial is to be read
	 * @throws IOException If there is any input error in reading the polynomial
	 * @return The polynomial linked list (front node) constructed from coefficients and
	 *         degrees read from scanner
	 */
	public static Node read(Scanner sc) 
	throws IOException {
		Node poly = null;
		while (sc.hasNextLine()) {
			Scanner scLine = new Scanner(sc.nextLine());
			poly = new Node(scLine.nextFloat(), scLine.nextInt(), poly);
			scLine.close();
		}
		return poly;
	}
	
	/**
	 * Returns the sum of two polynomials - DOES NOT change either of the input polynomials.
	 * The returned polynomial MUST have all new nodes. In other words, none of the nodes
	 * of the input polynomials can be in the result.
	 * 
	 * @param poly1 First input polynomial (front of polynomial linked list)
	 * @param poly2 Second input polynomial (front of polynomial linked list
	 * @return A new polynomial which is the sum of the input polynomials - the returned node
	 *         is the front of the result polynomial
	 */
	public static Node add(Node poly1, Node poly2) {
		/** COMPLETE THIS METHOD **/
		// FOLLOWING LINE IS A PLACEHOLDER TO MAKE THIS METHOD COMPILE
		// CHANGE IT AS NEEDED FOR YOUR IMPLEMENTATION
		
		
		Node pol1 = poly1;
		Node pol2 = poly2;
		
		
		if((pol1 == null && pol2 == null)) return null;
		if((pol1 == null)) return poly2;
		if((pol2 == null)) return poly1;
		
		float co1 = pol1.term.coeff;
		float co2 = pol2.term.coeff;
		int exp1 = pol1.term.degree;
		int exp2 = pol2.term.degree;
		int fcase = 0;
		Node head = null;
		Node curr = null;
		
		while(pol1 != null || pol2 != null){
			float sum;
			int cexp;
			if(pol1 != null) {
			co1 = pol1.term.coeff;
			exp1 = pol1.term.degree;
			}
			else{
			co1 = 0;
			exp1 = -1;
			}
			if(pol2 != null) {
			exp2 = pol2.term.degree;
			co2 = pol2.term.coeff;
			}
			else {
			co2 = 0;
			exp2 = -1;
			}
			if(exp1 == exp2 && exp1!=-1) {
				sum = co1 + co2;
				cexp  = exp1;
				pol1 = pol1.next;
				pol2 = pol2.next;
			}
			else if((exp2 == -1 || exp1<exp2) && exp1 != -1) {
				sum = co1;
				cexp  = exp1;
				pol1 = pol1.next;
			}
			else {
				sum = co2;
				cexp  = exp2;
				pol2 = pol2.next;
			}
			if(fcase == 0) {
				Node addin = new Node(sum,cexp,null);
				head = addin;
				curr = addin;
				fcase++;
				}
			else if(sum != 0.0){ 
				Node addin = new Node(sum,cexp,null);
				curr.next = addin;
				curr = addin;
			
			}
			
		}
		
		return head;
	}
	
	/**
	 * Returns the product of two polynomials - DOES NOT change either of the input polynomials.
	 * The returned polynomial MUST have all new nodes. In other words, none of the nodes
	 * of the input polynomials can be in the result.
	 * 
	 * @param poly1 First input polynomial (front of polynomial linked list)
	 * @param poly2 Second input polynomial (front of polynomial linked list)
	 * @return A new polynomial which is the product of the input polynomials - the returned node
	 *         is the front of the result polynomial
	 */
	public static Node multiply(Node poly1, Node poly2) {
		/** COMPLETE THIS METHOD **/
		// FOLLOWING LINE IS A PLACEHOLDER TO MAKE THIS METHOD COMPILE
		// CHANGE IT AS NEEDED FOR YOUR IMPLEMENTATION
		if(poly1 == null || poly2 == null) return null;
		Node pol1 = poly1;
		
		Node com = null;
		int fcase = 0;
		
		
			while(pol1 != null) {
				float co1 = pol1.term.coeff;
				int deg1 = pol1.term.degree;
				Node holder = null;
				Node curr = null;
				Node pol2 = poly2;
					while(pol2 != null) {
						float co2 = pol2.term.coeff;
						int deg2 = pol2.term.degree;
						if(holder == null) {
							Node temp = new Node(co2*co1,deg2+deg1,null);
							holder = temp;
							curr = temp;
							}
						else {
						Node temp = new Node(co2*co1,deg2+deg1,null);
						curr.next = temp;
						curr = temp;
						}
						pol2 = pol2.next;
					}
				if(fcase == 1) {
					com = holder;
					fcase++;
					}
				else {
				com = add(com, holder);
				pol1 = pol1.next;
				}
			}
			
		
		return com;
	}
		
	/**
	 * Evaluates a polynomial at a given value.
	 * 
	 * @param poly Polynomial (front of linked list) to be evaluated
	 * @param x Value at which evaluation is to be done
	 * @return Value of polynomial p at x
	 */
	public static float evaluate(Node poly, float x) {
		/** COMPLETE THIS METHOD **/
		// FOLLOWING LINE IS A PLACEHOLDER TO MAKE THIS METHOD COMPILE
		// CHANGE IT AS NEEDED FOR YOUR IMPLEMENTATION
		Node ptr = poly;
		float sum = 0;
		do {
			float ans = 1;
			for(int i = 0; i < ptr.term.degree; i++)
				ans = ans * x;
			ans *= ptr.term.coeff;
			sum += ans;
			ptr = ptr.next;
		}while(ptr != null);
		
		return sum;
	}
	
	/**
	 * Returns string representation of a polynomial
	 * 
	 * @param poly Polynomial (front of linked list)
	 * @return String representation, in descending order of degrees
	 */
	public static String toString(Node poly) {
		if (poly == null) {
			return "0";
		} 
		
		String retval = poly.term.toString();
		for (Node current = poly.next ; current != null ;
		current = current.next) {
			retval = current.term.toString() + " + " + retval;
		}
		return retval;
	}	
}
